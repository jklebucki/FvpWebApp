@{
ViewData["Title"] = "Index";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="text-center">
    <h1 class="display-4">FVP Importer - konfiguracja systemów docelowych</h1>
    <p></p>
</div>

<div>
    <div class="row mb-4">
        <div class="col-2"></div>
        <div class="col-4">
            <button onclick="addTarget()" class="btn btn-outline-secondary btn-block">Dodaj</button>
        </div>
        <div class="col-4">
        </div>
        <div class="col-2"></div>
    </div>
    <div class="row mb-2">
        <div class="offset-2 col-8">
            <table id="targets" class="table table-bordered table-hover table-sm" style="width:100%">
                <thead>
                    <tr>
                        <th>Opis</th>
                        <th>Baza danych</th>
                        <th>Adres bazy danych</th>
                        <th>Akcje</th>
                        <th></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
<div id="app">
    <div class="modal fade" id="infoModal" tabindex="-1" role="dialog" aria-labelledby="infoTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoTitle">Szczegóły źródła danych</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="infoBody">
                    <div class="row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <div class="form-inline">
                                        <div class="form-group col-12 mb-1">
                                            <label class="col-5" for="source-descryption">Opis</label>
                                            <input v-model="targetConfig.target.descryption" type="text"
                                                class="form-control form-control-sm col-7" id="source-descryption"
                                                placeholder="Opis">
                                        </div>
                                    </div>
                                    <div class="form-inline">
                                        <div class="form-group col-12 mb-1">
                                            <label class="col-5" for="source-address">Lokalizacja</label>
                                            <input v-model="targetConfig.target.databaseAddress" type="text"
                                                class="form-control form-control-sm col-7" id="source-address"
                                                placeholder="Lokalizacja">
                                        </div>
                                    </div>
                                    <div class="form-inline">
                                        <div class="form-group col-12 mb-1">
                                            <label class="col-5" for="source-dbName">Baza danych</label>
                                            <input v-model="targetConfig.target.databaseName" type="text"
                                                class="form-control form-control-sm col-7" id="source-dbName"
                                                placeholder="Baza danych">
                                        </div>
                                    </div>
                                    <div class="form-inline">
                                        <div class="form-group col-12 mb-1">
                                            <label class="col-5" for="source-username">Użytkownik</label>
                                            <input v-model="targetConfig.target.databaseUsername" type="text"
                                                class="form-control form-control-sm col-7" id="source-username"
                                                placeholder="Użytkownik">
                                        </div>
                                    </div>
                                    <div class="form-inline">
                                        <div class="form-group col-12 mb-2">
                                            <label class="col-5" for="source-username">Hasło</label>
                                            <input v-model="targetConfig.target.databasePassword" type="password"
                                                class="form-control form-control-sm col-7" id="source-password"
                                                placeholder="Hasło">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <span class="mr-2">{{ message }}</span>
                    <div v-if="mode === 'edit'"><button v-on:click="save" class="btn btn-primary">Zapisz</button></div>
                    <div v-if="mode === 'add'"><button v-on:click="add" class="btn btn-primary">Dodaj</button></div>
                    <button class="btn btn-secondary" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
<dev id="qmodal">
    <div>
        <div class="modal" tabindex="-1" id="q-modal">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">{{ haeder }}</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="q-modal-body">
                        <p v-html="body"></p>
                    </div>
                    <div class="modal-footer">
                        <button v-if="deleteOption" v-on:click="del" class="btn btn-primary"
                            data-dismiss="modal">Usuń</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Zamknij</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</dev>
@section scripts{
<script>
    Vue.config.devtools = true
    var table
    var qmodal = new Vue({
        el: '#qmodal',
        data: {
            haeder: 'Test header',
            body: '',
            id: null,
            confirmed: false,
            deleteOption: false
        },
        methods: {
            show: function (visibility, isDelete, id) {
                if (isDelete) {
                    deleteOption = isDelete
                    app.rowData = table.rows().data().toArray().find(element => element.targetId === id)
                    this.haeder = 'Potwierdź'
                    this.deleteOption = true
                    this.body = 'Na pewno chcesz usunąć ' + app.rowData.descryption ?? '' + ' ?'
                    this.id = id
                }
                if (visibility) {
                    $('#q-modal').modal('show')
                } else {
                    $('#q-modal').modal('hide')
                }
            },
            del: function (e) {
                this.confirmed = true
                deleteTarget(this.id)
                qmodal.confirmed = false
                qmodal.deleteOption = false
            }
        }
    })
    var app = new Vue({
        el: '#app',
        data: {
            targetConfig,
            rowData: null,
            mode: null,
            message: null
        },
        methods: {
            save: function (event) {
                event.preventDefault
                var data = JSON.stringify(this.targetConfig.target)
                const headers = { 'Content-Type': 'application/json' }
                axios.put('/Settings/PutTarget', data, { headers: headers })
                    .then(response => {
                        this.message = response.data.message
                        if (response.status == 200) {
                            table.ajax.reload()
                        }
                    })
                    .catch(error => {
                        this.message = error
                        console.log("AXIOS Error", error)
                    })
                    .then(function () {

                    })
            },
            add: function (event) {
                event.preventDefault
                var data = JSON.stringify(this.targetConfig.target)
                const headers = { 'Content-Type': 'application/json' }
                axios.post('/Settings/PostTarget', data, { headers: headers })
                    .then(response => {
                        this.message = response.data.message
                        if (response.status == 200) {
                            table.ajax.reload()
                        }
                    })
                    .catch(error => {
                        this.message = error
                        console.log("AXIOS Error", error)
                    })
                    .then(function () {

                    })
            }
        }
    })

    function addTarget() {
        app.mode = 'add'
        app.targetConfig = targetConfig
        app.message = null
        $('#infoModal').modal('show')
    }

    function deleteTarget(id) {
        if (qmodal.confirmed) {
            qmodal.body = '<div class="text-center"><div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"><span class="sr-only">Wykonuję...</span></div></div>'
            const headers = { 'Content-Type': 'application/json; charset=utf-8' }
            axios.delete('/Settings/DeleteTarget', { data: { 'id': id } }, { headers: headers })
                .then(response => {
                    if (response.status == 200) {
                        table.ajax.reload()
                        qmodal.show(false, false, null)
                    }
                })
                .catch(error => {
                    qmodal.body = error.response.data.message
                    qmodal.haeder = 'Błąd!'
                    qmodal.show(true, false, null)
                })
        }
    }

    $(document).ready(function () {
        url = '/Settings/GetTargets'
        table = $('#targets').DataTable({
            'dom': 'lfrtip',
            'pageLength': 15,
            'lengthChange': false,
            'lengthMenu': [10, 15, 20, 25, 50, 75, 100],
            'language': datatableLanguage,
            'processing': true,
            'ajax': url,
            'rowId': 'targetId',
            'columns': [
                { data: 'descryption' },
                { data: 'databaseName' },
                { data: 'databaseAddress' },
                {
                    data: 'targetId', render(data, type, row) {
                        return '<a class="ml-2" onclick="getData(' + row.targetId + ')" data-toggle="tooltip" data-placement="top" title="Pokaż szczegóły"><span class="oi oi-eye icon-button"></span></a>' +
                            '<a class="ml-2" onclick="qmodal.show(true,true,' + row.targetId + ')" data-toggle="tooltip" data-placement="top" title="Usuń"><span class="oi oi-delete icon-button"></span></a>'
                    }
                },
                { data: 'targetId' },
            ],
            "createdRow": function (row, data, index) {
                $('a', row).tooltip()
            },
            'columnDefs': [
                {
                    'targets': [4],
                    'visible': false,
                    'searchable': true
                }
            ]
        })
    })

    $(window).on('resize', function () {
        if (table !== null)
            table.columns.adjust();
    })

    function getData(id) {
        app.rowData = table.rows().data().toArray().find(element => element.targetId === id)
        app.mode = 'edit'
        app.targetConfig = targetConfig
        app.message = null
        axios.get('/Settings/GetTarget/' + id)
            .then(response => {
                if (response.status == 200) {
                    app.targetConfig = response.data
                }
            })
            .catch(error => {
                app.message = error
                console.log("AXIOS Error", error)
            })
            .then(function () {
                $('#infoModal').modal('show')
            })
    }
</script>
}